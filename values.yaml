######################## Dashbase Reference Values YAML ############################
# This file is a full configuration example documenting all non-deprecated
# options in comments.

#------------------------------- Global Settings -------------------------------

# Dashbase Version
# All Dashbase deployed services will use Docker images with the dashbase_version 
# as the version tag.
# See https://dashbase.atlassian.net/wiki/spaces/DK/pages/17039399/Release+Notes
# for information regarding available versions and release notes.
dashbase_version: 0.20.1

# License Information
username:
license:

# HTTPS
# Enable HTTPS between Dashbase services.
# Setting this setting to true requires creation of self-signed keystore 
# secret files. Generate with the following command:
# 'docker run -v $PWD/config/init:/config/init dashbase/k8s-helper --https'
# then 'kubectl apply -f config/init' to create the resources.
https: false

# Pod Priority
# Pod priority is necessary to guarantee ordered scheduling by Kubernetes.
# Recommended for production deployment only.
# Enabling pod priority adds three Dashbase PriorityClass resources:
# dashbase-high-priority
# dashbase-normal-priority
# dashbase-low-priority
# Set 'priorityClassName: <PRIORITY>' for any Dashbase service or table.
enablePodPriority: false

# Storage Classes
# Dashbase requires two Kubernetes StorageClass resources, each mapped to
# the equivalent of SSD and HDD type disks on a supported cloud platform:
# 'dashbase-meta' (SSD)
# 'dashbase-data' (HDD)
# StorageClasses are used by the stateful Dashbase services and tables.
# The available platforms are:
# aws | gce | azure | docker (for testing) | minikube (for testing)
default_storageclass_provider:
  platform:
  # Optional additional settings.
  # See https://kubernetes.io/docs/concepts/storage/storage-classes/#parameters.
  #parameters:
  #metadata:

# Kubernetes Ingress
# Enabling this creates an Kubernetes ingress resource with rules for all 
# Dashbase services. Rules are created with the host: <SERVICE.HOST>
# Example: web.dashbase.io
ingress:
  enabled: false
  # Set this to your domain like the above example.
  host:
  # Enabling the certmanager setting will automatically create an Issuer
  # resource using Let's Encrypt and additional signed Certificate resources
  certmanager: false 

# etcd Cluster
# https://github.com/helm/charts/tree/master/stable/etcd-operator
# Dashbase services use etcd for service discovery and syncing. 
# Recommended for production deployment only.
# If enabled, first deploy an etcd cluster using the etcd-operator.
# Install etcd-operator onto the same namespace as Dashbase:
# 'helm install stable/etcd-operator --name etcd-operator --namespace <NAMESPACE>'
etcd_cluster:
  enabled: false

# Default Section
# Configurations described in this section are applied to all services and/or
# tables if specified. All available configuration options can be set, however
# individual service or table configurations will take precedence.
default:
  # Below is an example of a default setting that would be applied to all services.
  #storage:
    #class: dashbase-meta
    #size: 10Gi
  # By default, stateful Dashbase services are configured with a 10Gi SSD disk.

  # Default Table Settings
  #table:
    # Like the example above, this default setting would be applied to all tables.
    #storage:
      #class: dashbase-data
      #size: 1000Gi
    # By default, Dashbase tables do not have a configured size. Please set this per
    # your requirements.

# Filebeat Log Monitoring
# Enable this setting to gather logs from all Dashbase Pods for a remote 
# monitoring setup via a Kubernetes DaemonSet resource.
# Recommended for production deployment only.
# If enabled, configure the 'elasticsearch_url' to point to a Dashbase monitoring
# URL.
# Note that this setting requires and creates the following Kubernetes resources:
# - ClusterRole
# - ClusterRoleBinding
# - ServiceAccount
# - ConfigMap
# - DaemonSet
filebeat:
  enabled: false
  elasticsearch_url:

# Prometheus ServiceAccount
# Enable this setting to create a ClusterRole and ServiceAccount required by the
# provided Prometheus service to gather metrics from all Dashbase Pods. 
accounts:
  prometheus: false

# Kube State Metrics
# Deploy a pre-configured https://github.com/kubernetes/kube-state-metrics
# Recommended for production deployment only.
kube-state-metrics:
  enabled: false
  # Specify available collectors below.
  #collectors:

#------------------------------- Dashbase Services -------------------------------
# Services
services:
  etcd:
    enabled: false

  prometheus:
    enabled: false
  
  api:
    enabled:

  web:
    enabled: true

  kafka:
    enabled: false

  zookeeper:
    enabled: true

  proxy:
    enabled: false
    replicas: 0

#------------------------------- Dashbase Tables -------------------------------
tables:
  sample:
    replicas: 1